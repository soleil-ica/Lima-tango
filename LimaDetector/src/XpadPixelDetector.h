//=============================================================================
//
// file :        XpadPixelDetector.h
//
// description : Include for the XpadPixelDetector class.
//
// project :	XPAD Pixel Detector from Lima
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _XPADPIXELDETECTOR_H
#define _XPADPIXELDETECTOR_H


#include "HwInterface.h"
#include "CtControl.h"
#include "CtAcquisition.h"
#include "CtImage.h"
#include <XpadInterface.h>
#include "Factory.h"

#include <tango.h>
//using namespace Tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------

using namespace lima;
using namespace std;

namespace XpadPixelDetector_ns
{

/**
 * Class Description:
 * This is the Xpad 3.2 (PCIe) Pixel Detector device, which uses Lima
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::RUNNING :
*  Tango::FAULT :
 */


class XpadPixelDetector: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevULong	*attr_deadTime_read;
		Tango::DevULong	attr_deadTime_write;
		Tango::DevULong	*attr_init_read;
		Tango::DevULong	attr_init_write;
		Tango::DevULong	*attr_shutter_read;
		Tango::DevULong	attr_shutter_write;
		Tango::DevULong	*attr_ovf_read;
		Tango::DevULong	attr_ovf_write;
		Tango::DevULong	*attr_mode_read;
		Tango::DevULong	attr_mode_write;
		Tango::DevULong	*attr_n_read;
		Tango::DevULong	attr_n_write;
		Tango::DevULong	*attr_p_read;
		Tango::DevULong	attr_p_write;
		Tango::DevULong	*attr_gp1_read;
		Tango::DevULong	attr_gp1_write;
		Tango::DevULong	*attr_gp2_read;
		Tango::DevULong	attr_gp2_write;
		Tango::DevULong	*attr_gp3_read;
		Tango::DevULong	attr_gp3_write;
		Tango::DevULong	*attr_gp4_read;
		Tango::DevULong	attr_gp4_write;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	Type of Acquisition:<BR>
 *	0->slow 16 bits (readOneImage)<BR>
 *	1->fast 16 bis (getImgSeq)<BR>
 *	2->slow 32 bits<BR>
 *	3->fast async 16 bits<BR>
 */
	Tango::DevShort	acquisitionType;
/**
 *	list of the all config G, that will be used by the command LoadAllConfigG:
 *	CMOS_DSBL
 *	AMP_TP
 *	ITHH
 *	VADJ
 *	VREF
 *	IMFP
 *	IOTA
 *	IPRE
 *	ITHL
 *	ITUNE
 *	IBUFFER
 */
	vector<long>	allConfigG;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	XpadPixelDetector(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	XpadPixelDetector(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	XpadPixelDetector(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~XpadPixelDetector() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name XpadPixelDetector methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for deadTime acquisition result.
 */
	virtual void read_deadTime(Tango::Attribute &attr);
/**
 *	Write deadTime attribute values to hardware.
 */
	virtual void write_deadTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for init acquisition result.
 */
	virtual void read_init(Tango::Attribute &attr);
/**
 *	Write init attribute values to hardware.
 */
	virtual void write_init(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for shutter acquisition result.
 */
	virtual void read_shutter(Tango::Attribute &attr);
/**
 *	Write shutter attribute values to hardware.
 */
	virtual void write_shutter(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for ovf acquisition result.
 */
	virtual void read_ovf(Tango::Attribute &attr);
/**
 *	Write ovf attribute values to hardware.
 */
	virtual void write_ovf(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for mode acquisition result.
 */
	virtual void read_mode(Tango::Attribute &attr);
/**
 *	Write mode attribute values to hardware.
 */
	virtual void write_mode(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for n acquisition result.
 */
	virtual void read_n(Tango::Attribute &attr);
/**
 *	Write n attribute values to hardware.
 */
	virtual void write_n(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for p acquisition result.
 */
	virtual void read_p(Tango::Attribute &attr);
/**
 *	Write p attribute values to hardware.
 */
	virtual void write_p(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for gp1 acquisition result.
 */
	virtual void read_gp1(Tango::Attribute &attr);
/**
 *	Write gp1 attribute values to hardware.
 */
	virtual void write_gp1(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for gp2 acquisition result.
 */
	virtual void read_gp2(Tango::Attribute &attr);
/**
 *	Write gp2 attribute values to hardware.
 */
	virtual void write_gp2(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for gp3 acquisition result.
 */
	virtual void read_gp3(Tango::Attribute &attr);
/**
 *	Write gp3 attribute values to hardware.
 */
	virtual void write_gp3(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for gp4 acquisition result.
 */
	virtual void read_gp4(Tango::Attribute &attr);
/**
 *	Write gp4 attribute values to hardware.
 */
	virtual void write_gp4(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for deadTime attribute.
 */
	virtual bool is_deadTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for init attribute.
 */
	virtual bool is_init_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for shutter attribute.
 */
	virtual bool is_shutter_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for ovf attribute.
 */
	virtual bool is_ovf_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for mode attribute.
 */
	virtual bool is_mode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for n attribute.
 */
	virtual bool is_n_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for p attribute.
 */
	virtual bool is_p_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gp1 attribute.
 */
	virtual bool is_gp1_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gp2 attribute.
 */
	virtual bool is_gp2_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gp3 attribute.
 */
	virtual bool is_gp3_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gp4 attribute.
 */
	virtual bool is_gp4_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for LoadFlatConfig command.
 */
	virtual bool is_LoadFlatConfig_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for LoadAllConfigG command.
 */
	virtual bool is_LoadAllConfigG_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SaveConfigL command.
 */
	virtual bool is_SaveConfigL_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SaveConfigG command.
 */
	virtual bool is_SaveConfigG_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for LoadConfig command.
 */
	virtual bool is_LoadConfig_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for LoadConfigG command.
 */
	virtual bool is_LoadConfigG_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Reset command.
 */
	virtual bool is_Reset_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for GetModConfig command.
 */
	virtual bool is_GetModConfig_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * Load a Flat config, for each pixel
 *	@param	argin	Flat value to be loaded
 *	@exception DevFailed
 */
	void	load_flat_config(Tango::DevULong);
/**
 * IBUFFER
 *	@param	argin	modNum(1..8), chipId(0..6), config_values (11 values)
 *	@exception DevFailed
 */
	void	load_all_config_g(const Tango::DevVarULongArray *);
/**
 * The function loads/stores a line of calibration data at the line index curRow in the 
 *	memory buffer identified by calibId of the chip identified by chipId of the modules 
 *	selected by  modNum.  The 80 calibration data values that are stored starting at 
 *	address value. Calibration data (80 words 16 bits) for one row of one chip (9 bits)
 *	@param	argin	modNum(1..8), calibId(0..6), chipId(0..7), curRow (0..119), values (80 values)
 *	@exception DevFailed
 */
	void	save_config_l(const Tango::DevVarULongArray *);
/**
 * The   function   loads/store   the   global   register  reg  (see   paragraph   3.4)   in   the 
 *	memory buffer identified by calibId.
 *	@param	argin	modNum(1..8), calibId(0..6), reg, values (7 values)
 *	@exception DevFailed
 */
	void	save_config_g(const Tango::DevVarULongArray *);
/**
 * This function activate  the copy of   the calibration data stored  into  the memory 
 *	buffer identified by calibId of all the chips of the modules selected by modNum  
 *	into the config registers.
 *	@param	argin	modNum(1..8), calibId(0..6)
 *	@exception DevFailed
 */
	void	load_config(const Tango::DevVarULongArray *);
/**
 * Load a value of a wanted config G register.
 *	register IDs are:
 *	CMOS_DSBL_V32  0x01 
 *	AMP_TP_V32     0x1F
 *	ITHH_V32       0x33
 *	VADJ_V32       0x35
 *	VREF_V32       0x36
 *	IMFP_V32       0x3b
 *	IOTA_V32       0x3c
 *	IPRE_V32       0x3d
 *	ITHL_V32       0x3e
 *	TUNE_V32      0x3f
 *	IBUFFER_V32    0x40
 *	@param	argin	modNum(1..8), chipId(0..6), register ID, register value
 *	@exception DevFailed
 */
	void	load_config_g(const Tango::DevVarULongArray *);
/**
 * Reset the Xpad : call the xpci_hubModRebootNIOS(modMask) xpix function
 *	@exception DevFailed
 */
	void	reset();
/**
 * This fonction read the values of the local configuration registers currently loaded 
 *	in the detector for all the chips on all the modules. Data are received in the format of 2 bytes per pixel with 
 *	the following format.<BR>
 *	 bit[0] enable counters<BR>
 *	 bit[1] enable ampli (validated at 0)<BR>
 *	 bit[2] enable test pulse<BR>
 *	 bit[8:3] DACL registers<BR>
 *	 bit[15:9] reserved (tied to 0)
 *	@return	array of data
 *	@exception DevFailed
 */
	Tango::DevVarUShortArray	*get_mod_config();

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------

	bool 			m_is_device_initialized ;
	stringstream	m_status_message;
	
	void set_all_f_parameters();

	//lima OBJECTS
	Xpad::Interface* 		m_interface;
    Xpad::Camera*           m_camera;
	CtControl*			  m_ct;
};

}	// namespace_ns

#endif	// _XPADPIXELDETECTOR_H

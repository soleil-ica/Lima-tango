static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         Eiger.cpp
//
// description :  C++ source for the Eiger and its commands.
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                Eiger are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name|  Method name
//	----------------------------------------
//  State   |  dev_state()
//  Status  |  dev_status()
//
//===================================================================


#include "tango.h"
#include <PogoHelper.h>
#include <Eiger.h>
#include <EigerClass.h>


namespace Eiger_ns
{

//+----------------------------------------------------------------------------
//
// method : 		Eiger::Eiger(string &s)
//
// description : 	constructor for simulated Eiger
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name
//
//-----------------------------------------------------------------------------
Eiger::Eiger(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str())
{
	init_device();
}

Eiger::Eiger(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s)
{
	init_device();
}

Eiger::Eiger(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		Eiger::delete_device()
//
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void Eiger::delete_device()
{
	//	Delete device allocated objects

   DELETE_SCALAR_ATTRIBUTE(attr_countrateCorrection_read);
   DELETE_SCALAR_ATTRIBUTE(attr_flatfieldCorrection_read);
   DELETE_SCALAR_ATTRIBUTE(attr_pixelMask_read);
   DELETE_SCALAR_ATTRIBUTE(attr_thresholdEnergy_read);
   DELETE_SCALAR_ATTRIBUTE(attr_virtualPixelCorrection_read);
   DELETE_SCALAR_ATTRIBUTE(attr_photonEnergy_read);
   DELETE_SCALAR_ATTRIBUTE(attr_temperature_read);
   DELETE_SCALAR_ATTRIBUTE(attr_humidity_read);
   DELETE_SCALAR_ATTRIBUTE(attr_efficiencyCorrection_read);
   DELETE_SCALAR_ATTRIBUTE(attr_compression_read);
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::init_device()
//
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void Eiger::init_device()
{
	INFO_STREAM << "Eiger::Eiger() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();
  
   CREATE_SCALAR_ATTRIBUTE(attr_countrateCorrection_read);
   CREATE_SCALAR_ATTRIBUTE(attr_flatfieldCorrection_read);
   CREATE_SCALAR_ATTRIBUTE(attr_pixelMask_read);
   CREATE_SCALAR_ATTRIBUTE(attr_thresholdEnergy_read);
   CREATE_SCALAR_ATTRIBUTE(attr_virtualPixelCorrection_read);
   CREATE_SCALAR_ATTRIBUTE(attr_photonEnergy_read);
   CREATE_SCALAR_ATTRIBUTE(attr_temperature_read);
   CREATE_SCALAR_ATTRIBUTE(attr_humidity_read);
   CREATE_SCALAR_ATTRIBUTE(attr_efficiencyCorrection_read);
   CREATE_SCALAR_ATTRIBUTE(attr_compression_read);

	m_is_device_initialized = false;
	set_state(Tango::INIT);
	m_status_message.str("");
    yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
	try
	{
		//- get the main object used to pilot the lima framework		
		m_ct = ControlFactory::instance().get_control("Eiger");
		if(m_ct == 0)
		{
			INFO_STREAM << "Initialization Failed : Unable to get the lima control of " << "(" << "Eiger" << ") !" << endl;
			m_status_message << "Initialization Failed : Unable to get the lima control of " << "(" << "Eiger" << ") !" << endl;
			m_is_device_initialized = false;
			set_state(Tango::FAULT);
			return;
		}
		
		//- get interface to specific camera
		m_hw = dynamic_cast<lima::Eiger::Interface*>(m_ct->hwInterface());
		
		//- get camera to specific detector
		m_camera = &(m_hw->getCamera());

	}
	catch(Exception& e)
	{
		INFO_STREAM << "Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg( ) << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(...)
	{
		INFO_STREAM << "Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}
	
	// Write at init
	try
	{
	  // Init attributes with memorized properties	

      // countrateCorrection
	  *attr_countrateCorrection_read = memorizedCountrateCorrection;
      Tango::WAttribute &attr_countrateCorrection = dev_attr->get_w_attr_by_name("countrateCorrection");       
      attr_countrateCorrection.set_write_value(attr_countrateCorrection_read);
	  write_countrateCorrection(attr_countrateCorrection);
      
      // flatfieldCorrection
      *attr_flatfieldCorrection_read = memorizedFlatfieldCorrection;
      Tango::WAttribute &attr_flatfieldCorrection = dev_attr->get_w_attr_by_name("flatfieldCorrection");
      attr_flatfieldCorrection.set_write_value(attr_flatfieldCorrection_read);
	  write_flatfieldCorrection(attr_flatfieldCorrection);
      
      // pixelMask
      *attr_pixelMask_read = memorizedPixelMask;
      Tango::WAttribute &attr_pixelMask = dev_attr->get_w_attr_by_name("pixelMask");
      attr_pixelMask.set_write_value(attr_pixelMask_read);
	  write_pixelMask(attr_pixelMask);	  
      
      // thresholdEnergy
      *attr_thresholdEnergy_read = memorizedThresholdEnergy;
      Tango::WAttribute &attr_thresholdEnergy = dev_attr->get_w_attr_by_name("thresholdEnergy");
      attr_thresholdEnergy.set_write_value(attr_thresholdEnergy_read);
	  write_thresholdEnergy(attr_thresholdEnergy);		  
      
      // virtualPixelCorrection
      *attr_virtualPixelCorrection_read = memorizedVirtualPixelCorrection;
      Tango::WAttribute &attr_virtualPixelCorrection = dev_attr->get_w_attr_by_name("virtualPixelCorrection");
      attr_virtualPixelCorrection.set_write_value(attr_virtualPixelCorrection_read);
	  write_virtualPixelCorrection(attr_virtualPixelCorrection);
            
      // photonEnergy
      *attr_photonEnergy_read = memorizedPhotonEnergy;
      Tango::WAttribute &attr_photonEnergy = dev_attr->get_w_attr_by_name("photonEnergy");
      attr_photonEnergy.set_write_value(attr_photonEnergy_read);
	  write_photonEnergy(attr_photonEnergy);

	  // efficiencyCorrection
      *attr_efficiencyCorrection_read = memorizedEfficiencyCorrection;
      Tango::WAttribute &attr_efficiencyCorrection = dev_attr->get_w_attr_by_name("efficiencyCorrection");
      attr_efficiencyCorrection.set_write_value(attr_efficiencyCorrection_read);
	  write_efficiencyCorrection(attr_efficiencyCorrection);

	  // compression
      *attr_compression_read = memorizedCompression;
      Tango::WAttribute &attr_compression = dev_attr->get_w_attr_by_name("compression");
      attr_compression.set_write_value(attr_compression_read);
	  write_compression(attr_compression);

	}
	catch(Exception& e)
	{
		INFO_STREAM << "-- Initialization Failed : " << e.getErrMsg() << endl;
		m_status_message << "Initialization Failed : " << e.getErrMsg( ) << endl;
		m_is_device_initialized = false;
		set_state(Tango::FAULT);
		return;
	}
	catch(...)
	{
		INFO_STREAM << "-- Initialization Failed : UNKNOWN" << endl;
		m_status_message << "Initialization Failed : UNKNOWN" << endl;
		set_state(Tango::FAULT);
		m_is_device_initialized = false;
		return;
	}

	m_is_device_initialized = true;
	set_state(Tango::STANDBY);
	dev_state();	
}


//+----------------------------------------------------------------------------
//
// method : 		Eiger::get_device_property()
//
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void Eiger::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("DetectorIP"));
	dev_prop.push_back(Tango::DbDatum("TargetPath"));
	dev_prop.push_back(Tango::DbDatum("MemorizedCountrateCorrection"));
	dev_prop.push_back(Tango::DbDatum("MemorizedFlatfieldCorrection"));
	dev_prop.push_back(Tango::DbDatum("MemorizedPixelMask"));
	dev_prop.push_back(Tango::DbDatum("MemorizedVirtualPixelCorrection"));
	dev_prop.push_back(Tango::DbDatum("MemorizedEfficiencyCorrection"));
	dev_prop.push_back(Tango::DbDatum("MemorizedThresholdEnergy"));
	dev_prop.push_back(Tango::DbDatum("MemorizedPhotonEnergy"));
	dev_prop.push_back(Tango::DbDatum("MemorizedCompression"));
	dev_prop.push_back(Tango::DbDatum("UseReader"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	EigerClass	*ds_class =
		(static_cast<EigerClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize DetectorIP from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  detectorIP;
	else {
		//	Try to initialize DetectorIP from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  detectorIP;
	}
	//	And try to extract DetectorIP value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  detectorIP;

	//	Try to initialize TargetPath from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  targetPath;
	else {
		//	Try to initialize TargetPath from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  targetPath;
	}
	//	And try to extract TargetPath value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  targetPath;

	//	Try to initialize MemorizedCountrateCorrection from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedCountrateCorrection;
	else {
		//	Try to initialize MemorizedCountrateCorrection from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedCountrateCorrection;
	}
	//	And try to extract MemorizedCountrateCorrection value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedCountrateCorrection;

	//	Try to initialize MemorizedFlatfieldCorrection from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedFlatfieldCorrection;
	else {
		//	Try to initialize MemorizedFlatfieldCorrection from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedFlatfieldCorrection;
	}
	//	And try to extract MemorizedFlatfieldCorrection value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedFlatfieldCorrection;

	//	Try to initialize MemorizedPixelMask from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedPixelMask;
	else {
		//	Try to initialize MemorizedPixelMask from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedPixelMask;
	}
	//	And try to extract MemorizedPixelMask value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedPixelMask;

	//	Try to initialize MemorizedVirtualPixelCorrection from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedVirtualPixelCorrection;
	else {
		//	Try to initialize MemorizedVirtualPixelCorrection from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedVirtualPixelCorrection;
	}
	//	And try to extract MemorizedVirtualPixelCorrection value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedVirtualPixelCorrection;

	//	Try to initialize MemorizedEfficiencyCorrection from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedEfficiencyCorrection;
	else {
		//	Try to initialize MemorizedEfficiencyCorrection from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedEfficiencyCorrection;
	}
	//	And try to extract MemorizedEfficiencyCorrection value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedEfficiencyCorrection;

	//	Try to initialize MemorizedThresholdEnergy from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedThresholdEnergy;
	else {
		//	Try to initialize MemorizedThresholdEnergy from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedThresholdEnergy;
	}
	//	And try to extract MemorizedThresholdEnergy value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedThresholdEnergy;

	//	Try to initialize MemorizedPhotonEnergy from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedPhotonEnergy;
	else {
		//	Try to initialize MemorizedPhotonEnergy from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedPhotonEnergy;
	}
	//	And try to extract MemorizedPhotonEnergy value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedPhotonEnergy;

	//	Try to initialize MemorizedCompression from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  memorizedCompression;
	else {
		//	Try to initialize MemorizedCompression from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  memorizedCompression;
	}
	//	And try to extract MemorizedCompression value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  memorizedCompression;

	//	Try to initialize UseReader from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  useReader;
	else {
		//	Try to initialize UseReader from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  useReader;
	}
	//	And try to extract UseReader value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  useReader;



	//	End of Automatic code generation
	//------------------------------------------------------------------
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "127.0.0.1", "DetectorIP");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "/tmp", 	 "TargetPath");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "false", 	 "MemorizedCountrateCorrection");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "true", 	 "MemorizedFlatfieldCorrection");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "false",	 "MemorizedPixelMask");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "true",	     "MemorizedVirtualPixelCorrection");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "false", 	 "MemorizedEfficiencyCorrection");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "4000.0",    "MemorizedThresholdEnergy");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "8000.0", 	 "MemorizedPhotonEnergy");
	yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "true", 	 "MemorizedCompression");
    yat4tango::PropertyHelper::create_property_if_empty(this, dev_prop, "true", 	 "UseReader");
}
//+----------------------------------------------------------------------------
//
// method : 		Eiger::always_executed_hook()
//
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void Eiger::always_executed_hook()
{
 try
    {
        m_status_message.str("");
        yat::AutoMutex<> _lock(ControlFactory::instance().get_global_mutex());
        //- get the singleton control objet used to pilot the lima framework
        m_ct = ControlFactory::instance().get_control("Eiger");
        if (m_ct != 0)
        {
            //- get interface to specific camera
            m_hw = dynamic_cast<lima::Eiger::Interface*> (m_ct->hwInterface());
            //- get camera to specific detector
            m_camera = &(m_hw->getCamera());
        }

        //update state
        dev_state();
    }
    catch (Exception& e)
    {
        ERROR_STREAM << e.getErrMsg() << endl;
        m_status_message << "Initialization Failed : " << e.getErrMsg() << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
    catch (...)
    {
        ERROR_STREAM << "Initialization Failed : UNKNOWN" << endl;
        m_status_message << "Initialization Failed : UNKNOWN" << endl;
        //- throw exception
        set_state(Tango::FAULT);
        m_is_device_initialized = false;
        return;
    }
}
//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_attr_hardware
//
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void Eiger::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "Eiger::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}
//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_compression
// 
// description : 	Extract real attribute values for compression acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_compression(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_compression(Tango::Attribute &attr) entering... "<< endl;

   try
   {
      m_camera->getCompression(*attr_compression_read);
      attr.set_value(attr_compression_read);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                 static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                 static_cast<const char*> (string(df.errors[0].desc).c_str()),
                 static_cast<const char*> ("Eiger::read_compression"));
   } 	
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::write_compression
// 
// description : 	Write compression attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Eiger::write_compression(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Eiger::write_compression(Tango::WAttribute &attr) entering... "<< endl;

	try
	{
		attr.get_write_value(attr_compression_write);
	  	m_camera->setCompression(attr_compression_write);
	  	memorizedCompression = attr_compression_write;
	  	yat4tango::PropertyHelper::set_property(this, "MemorizedCompression", memorizedCompression);	  	
	}
	catch(Tango::DevFailed& df)
	{
	  	ERROR_STREAM << df << endl;
	  	//- rethrow exception
	  	Tango::Except::re_throw_exception(df,
	                                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
	                                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
	                                    static_cast<const char*> ("Eiger::write_compression"));
	}	
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::write_efficiencyCorrection
// 
// description : 	Write efficiencyCorrection attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Eiger::write_efficiencyCorrection(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Eiger::write_efficiencyCorrection(Tango::WAttribute &attr) entering... "<< endl;

	try
	{
		attr.get_write_value(attr_efficiencyCorrection_write);
	  	m_camera->setEfficiencyCorrection(attr_efficiencyCorrection_write);
	  	memorizedEfficiencyCorrection = attr_efficiencyCorrection_write;
	  	yat4tango::PropertyHelper::set_property(this, "MemorizedEfficiencyCorrection", memorizedEfficiencyCorrection);
	}
	catch(Tango::DevFailed& df)
	{
	  	ERROR_STREAM << df << endl;
	  	//- rethrow exception
	  	Tango::Except::re_throw_exception(df,
	                                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
	                                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
	                                    static_cast<const char*> ("Eiger::write_efficiencyCorrection"));
	}	
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_efficiencyCorrection
// 
// description : 	Extract real attribute values for efficiencyCorrection acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_efficiencyCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_efficiencyCorrection(Tango::Attribute &attr) entering... "<< endl;

   try
   {
      m_camera->getEfficiencyCorrection(*attr_efficiencyCorrection_read);
      attr.set_value(attr_efficiencyCorrection_read);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                 static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                 static_cast<const char*> (string(df.errors[0].desc).c_str()),
                 static_cast<const char*> ("Eiger::read_efficiencyCorrection"));
   }   	
}



//+----------------------------------------------------------------------------
//
// method : 		Eiger::write_countrateCorrection
// 
// description : 	Write countrateCorrection attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Eiger::write_countrateCorrection(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Eiger::write_countrateCorrection(Tango::WAttribute &attr) entering... "<< endl;
   
   try
   {
      attr.get_write_value(attr_countrateCorrection_write);
      m_camera->setCountrateCorrection(attr_countrateCorrection_write);
      memorizedCountrateCorrection = attr_countrateCorrection_write;
      yat4tango::PropertyHelper::set_property(this, "MemorizedCountrateCorrection", memorizedCountrateCorrection);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                        static_cast<const char*> ("Eiger::write_countrateCorrection"));
   }
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::write_flatfieldCorrection
// 
// description : 	Write flatfieldCorrection attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Eiger::write_flatfieldCorrection(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Eiger::write_flatfieldCorrection(Tango::WAttribute &attr) entering... "<< endl;
   
   try
   {
      attr.get_write_value(attr_flatfieldCorrection_write);
      m_camera->setFlatfieldCorrection(attr_flatfieldCorrection_write);
      memorizedFlatfieldCorrection = attr_flatfieldCorrection_write;
      yat4tango::PropertyHelper::set_property(this, "MemorizedFlatfieldCorrection", memorizedFlatfieldCorrection);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                        static_cast<const char*> ("Eiger::write_flatfieldCorrection"));
   }   
}


//+----------------------------------------------------------------------------
//
// method : 		Eiger::write_pixelMask
// 
// description : 	Write pixelMask attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Eiger::write_pixelMask(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Eiger::write_pixelMask(Tango::WAttribute &attr) entering... "<< endl;
   
   try
   {
      attr.get_write_value(attr_pixelMask_write);
      m_camera->setPixelMask(attr_pixelMask_write);
      memorizedPixelMask = attr_pixelMask_write;
      yat4tango::PropertyHelper::set_property(this, "MemorizedPixelMask", memorizedPixelMask);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                        static_cast<const char*> ("Eiger::write_pixelMask"));
   }   
}


//+----------------------------------------------------------------------------
//
// method : 		Eiger::write_thresholdEnergy
// 
// description : 	Write thresholdEnergy attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Eiger::write_thresholdEnergy(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Eiger::write_thresholdEnergy(Tango::WAttribute &attr) entering... "<< endl;
   
   try
   {
      attr.get_write_value(attr_thresholdEnergy_write);
      m_camera->setFlatfieldCorrection(attr_thresholdEnergy_write);
      memorizedThresholdEnergy = attr_thresholdEnergy_write;
      yat4tango::PropertyHelper::set_property(this, "MemorizedThresholdEnergy", memorizedThresholdEnergy);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                        static_cast<const char*> ("Eiger::write_thresholdEnergy"));
   }    
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::write_virtualPixelCorrection
// 
// description : 	Write virtualPixelCorrection attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Eiger::write_virtualPixelCorrection(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Eiger::write_virtualPixelCorrection(Tango::WAttribute &attr) entering... "<< endl;
   
   try
   {
      attr.get_write_value(attr_virtualPixelCorrection_write);
      m_camera->setVirtualPixelCorrection(attr_virtualPixelCorrection_write);
      memorizedVirtualPixelCorrection = attr_virtualPixelCorrection_write;
      yat4tango::PropertyHelper::set_property(this, "MemorizedVirtualPixelCorrection", memorizedVirtualPixelCorrection);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                        static_cast<const char*> ("Eiger::write_virtualPixelCorrection"));
   }    
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::write_photonEnergy
// 
// description : 	Write photonEnergy attribute values to hardware.
//
//-----------------------------------------------------------------------------
void Eiger::write_photonEnergy(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Eiger::write_photonEnergy(Tango::WAttribute &attr) entering... "<< endl;
   
   try
   {
      attr.get_write_value(attr_photonEnergy_write);
      m_camera->setPhotonEnergy(attr_photonEnergy_write);
      memorizedPhotonEnergy = attr_photonEnergy_write;
      yat4tango::PropertyHelper::set_property(this, "MemorizedPhotonEnergy", memorizedPhotonEnergy);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                                        static_cast<const char*> ("Eiger::write_photonEnergy"));
   }     
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_temperature
// 
// description : 	Extract real attribute values for temperature acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_temperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_temperature(Tango::Attribute &attr) entering... "<< endl;

	try
	{
        *attr_temperature_read = m_camera->getTemperature();
		attr.set_value(attr_temperature_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  static_cast<const char*> ("TANGO_DEVICE_ERROR"),
										  static_cast<const char*> (string(df.errors[0].desc).c_str()),
										  static_cast<const char*> ("Eiger::read_temperature"));
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception(
									   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
									   static_cast<const char*> (e.getErrMsg().c_str()),
									   static_cast<const char*> ("Eiger::read_temperature"));
	}   
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_humidity
// 
// description : 	Extract real attribute values for humidity acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_humidity(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_humidity(Tango::Attribute &attr) entering... "<< endl;
   
	try
	{
		*attr_humidity_read = m_camera->getHumidity();
		attr.set_value(attr_humidity_read);
	}
	catch(Tango::DevFailed& df)
	{
		ERROR_STREAM << df << endl;
		//- rethrow exception
		Tango::Except::re_throw_exception(df,
										  static_cast<const char*> ("TANGO_DEVICE_ERROR"),
										  static_cast<const char*> (string(df.errors[0].desc).c_str()),
										  static_cast<const char*> ("Eiger::read_humidity"));
	}
	catch(Exception& e)
	{
		ERROR_STREAM << e.getErrMsg() << endl;
		//- throw exception
		Tango::Except::throw_exception(
									   static_cast<const char*> ("TANGO_DEVICE_ERROR"),
									   static_cast<const char*> (e.getErrMsg().c_str()),
									   static_cast<const char*> ("Eiger::read_humidity"));
	}    
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_flatfieldCorrection
// 
// description : 	Extract real attribute values for flatfieldCorrection acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_flatfieldCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_flatfieldCorrection(Tango::Attribute &attr) entering... "<< endl;
   
   try
   {
      m_camera->getFlatfieldCorrection(*attr_efficiencyCorrection_read);
      attr.set_value(attr_efficiencyCorrection_read);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                 static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                 static_cast<const char*> (string(df.errors[0].desc).c_str()),
                 static_cast<const char*> ("Eiger::read_flatfieldCorrection"));
   }   
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_pixelMask
// 
// description : 	Extract real attribute values for pixelMask acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_pixelMask(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_pixelMask(Tango::Attribute &attr) entering... "<< endl;
   
  try
   {
      m_camera->getPixelMask(*attr_pixelMask_read);
      attr.set_value(attr_pixelMask_read);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                 static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                 static_cast<const char*> (string(df.errors[0].desc).c_str()),
                 static_cast<const char*> ("Eiger::read_pixelMask"));
   }   
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_thresholdEnergy
// 
// description : 	Extract real attribute values for thresholdEnergy acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_thresholdEnergy(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_thresholdEnergy(Tango::Attribute &attr) entering... "<< endl;
   
  try
   {
   		if ( Tango::STANDBY == get_state() )
		{
			m_camera->getThresholdEnergy(*attr_thresholdEnergy_read);
			attr_thresholdEnergy_read_cache = *attr_thresholdEnergy_read;	
		}
		else if ( Tango::RUNNING == get_state() )	// use the cached value while in RUNNING state
		{
			*attr_thresholdEnergy_read = attr_thresholdEnergy_read_cache;
		}
      
      	attr.set_value(attr_thresholdEnergy_read);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                 static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                 static_cast<const char*> (string(df.errors[0].desc).c_str()),
                 static_cast<const char*> ("Eiger::read_thresholdEnergy"));
   }   
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_virtualPixelCorrection
// 
// description : 	Extract real attribute values for virtualPixelCorrection acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_virtualPixelCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_virtualPixelCorrection(Tango::Attribute &attr) entering... "<< endl;
   
   try
   {
      m_camera->getVirtualPixelCorrection(*attr_virtualPixelCorrection_read);
      attr.set_value(attr_virtualPixelCorrection_read);
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                 static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                 static_cast<const char*> (string(df.errors[0].desc).c_str()),
                 static_cast<const char*> ("Eiger::read_virtualPixelCorrection"));
   }   
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_photonEnergy
// 
// description : 	Extract real attribute values for photonEnergy acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_photonEnergy(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_photonEnergy(Tango::Attribute &attr) entering... "<< endl;
   
   try
   {
		if ( Tango::STANDBY == get_state() )
		{
      		m_camera->getPhotonEnergy(*attr_photonEnergy_read);
      		attr_photonEnergy_read_cache = *attr_photonEnergy_read;
		}
		else if ( Tango::RUNNING == get_state() ) // use the cached value while in RUNNING state
		{
			*attr_photonEnergy_read = attr_photonEnergy_read_cache;
		}		

      	attr.set_value(attr_photonEnergy_read);   
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                 static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                 static_cast<const char*> (string(df.errors[0].desc).c_str()),
                 static_cast<const char*> ("Eiger::read_photonEnergy"));
   }   
}

//+----------------------------------------------------------------------------
//
// method : 		Eiger::read_countrateCorrection
// 
// description : 	Extract real attribute values for countrateCorrection acquisition result.
//
//-----------------------------------------------------------------------------
void Eiger::read_countrateCorrection(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Eiger::read_countrateCorrection(Tango::Attribute &attr) entering... "<< endl;
   
   try
   {
      m_camera->getCountrateCorrection(*attr_countrateCorrection_read);
      attr.set_value(attr_countrateCorrection_read);   
   }
   catch(Tango::DevFailed& df)
   {
      ERROR_STREAM << df << endl;
      //- rethrow exception
      Tango::Except::re_throw_exception(df,
                 static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                 static_cast<const char*> (string(df.errors[0].desc).c_str()),
                 static_cast<const char*> ("Eiger::read_countrateCorrection"));
   }
}


//+------------------------------------------------------------------
/**
 *	method:	Eiger::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState Eiger::dev_state()
{
	Tango::DevState	argout = DeviceImpl::dev_state();
	DEBUG_STREAM << "Eiger::dev_state(): entering... !" << endl;

	//	Add your own code to control device here
	stringstream    DeviceStatus;
	DeviceStatus     << "";
	Tango::DevState DeviceState    = Tango::STANDBY;
	if(!m_is_device_initialized )
	{
		DeviceState  = Tango::FAULT;
		DeviceStatus << m_status_message.str();
	}
	else
	{
		// state & status are retrieved from Factory, Factory is updated by Generic device
		DeviceState  = ControlFactory::instance().get_state();
		DeviceStatus << ControlFactory::instance().get_status();
	}

	set_state(DeviceState);
	set_status(DeviceStatus.str());

	return DeviceState;
}















}	//	namespace
